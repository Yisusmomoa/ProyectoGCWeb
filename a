var scene;
	var camera;
	var renderer;
	var controls;
	var objects = [];
	var clock;
	var deltaTime;	
	var keys = {};
    var grid;
    var jugador1;
	$(document).ready(function() {

		setupScene();

		// loadOBJWithMTL("assets/","box.obj","box.mtl",(objetoCargado)=>{
		// 	objetoCargado.position.z=-20;
		// 	scene.add(objetoCargado);
		// });

		render();

		document.addEventListener('keydown', onKeyDown);
		document.addEventListener('keyup', onKeyUp);		
	});
	//ruta del modelo,obj,mtl, callback cuando la carga este concluida
	function loadOBJWithMTL(path, objFile, mtlFile, onLoadCallback) {
		var mtlLoader=new THREE.MTLLoader();
		mtlLoader.setPath(path);
		//funciones lambda es lo mismo que una función anonima
		
							//en materialCargado nos va a regresar el material ya cargado
		mtlLoader.load(mtlFile,(materialCargado)=>{
			//este bloque se eejcuta solo cuando termina de cargar el MTL
			var objLoader=new THREE.OBJLoader();
			objLoader.setPath(path);
			objLoader.setMaterials(materialCargado);
			//iniciar la carga del obj, con un callback, cuando este cargado
			objLoader.load(objFile,(objCargado)=>{
				//se ejecuta cuando se termina de cargar el OBJ
				onLoadCallback(objCargado);
			})
		})
	}

	function onKeyDown(event) {
		keys[String.fromCharCode(event.keyCode)] = true;
	}
	function onKeyUp(event) {
		keys[String.fromCharCode(event.keyCode)] = false;
	}

	
	function render() {
		requestAnimationFrame(render);
		deltaTime = clock.getDelta();	

		var yaw = 0;
		var forward = 0.01;
		if (keys["A"]) {
			yaw = -35;
		} else if (keys["D"]) {
			yaw = 35;
		}
       
		// if (keys["W"]) {
		// 	forward = -20;
		// } else if (keys["S"]) {
		// 	forward = 20;
		// }
        forward+=0.01;
		//camera.rotation.y += yaw * deltaTime;
		camera.translateX(yaw*deltaTime);
		camera.translateZ(forward*deltaTime);
        grid.translateZ(0.3);
        //grid.position.z+=0.4;

        //jugador1.translateX(camera.position.x);
        jugador1.translateZ(forward*deltaTime);
        // jugador1.position.z-=0.01;
        jugador1.position.x=camera.position.x;

		renderer.render(scene, camera);
	}

	function setupScene() {		
		var visibleSize = { width: window.innerWidth-50, height: window.innerHeight-50};
		clock = new THREE.Clock();		
		scene = new THREE.Scene();
        var materialcubo=new THREE.MeshLambertMaterial({color:new THREE.Color(0.5,0.0,0.0)});
        var geometrycubo=new THREE.BoxGeometry(1,1,1);
        jugador1=new THREE.Mesh(geometrycubo,materialcubo);
        jugador1.position = new THREE.Vector3(0,0,0);
        jugador1.position.z=-5;
        loadOBJWithMTL("assets/UfoLowPoly/","Low_poly_UFO.obj","Low_poly_UFO.mtl",(objetoCargado)=>{
			// objetoCargado.position.z=-10;
            // objetoCargado.position.y=-1;
            objetoCargado.position = new THREE.Vector3(0,0,0);
            objetoCargado.position.z=-5;
            objetoCargado.scale.x=0.07;
            objetoCargado.scale.y=0.07;
            objetoCargado.scale.z=0.07;
            // objetoCargado.setScale(15,15,15);
			scene.add(objetoCargado);
		});
		camera = new THREE.PerspectiveCamera(75, 
            visibleSize.width / visibleSize.height, 0.1, 1000);
            camera.rotateX(-20*Math.PI/180);
            camera.position.set(0,5.5,2);
        camera.add(jugador1);
        scene.add(jugador1);
		renderer = new THREE.WebGLRenderer( {precision: "mediump" } );
		renderer.setClearColor(new THREE.Color(0, 0, 0));
		renderer.setPixelRatio(visibleSize.width / visibleSize.height);
		renderer.setSize(visibleSize.width, visibleSize.height);

		var ambientLight = new THREE.AmbientLight(new THREE.Color(1, 1, 1), 1.0);
		scene.add(ambientLight);

		var directionalLight = new THREE.DirectionalLight(new THREE.Color(1, 1, 0), 0.4);
		directionalLight.position.set(0, 0, 1);
		scene.add(directionalLight);
        
        //grid
        let divisions = 40;
        let gridLimit = 200;
		grid = new THREE.GridHelper(gridLimit*2, divisions, 0xffffff, 0xffffff);
        grid.position.y = -1;
		scene.add(grid);

        

		$("#scene-section").append(renderer.domElement);
	}

    //ruta del modelo,obj,mtl, callback cuando la carga este concluida
	function loadOBJWithMTL(path, objFile, mtlFile, onLoadCallback) {
		var mtlLoader=new THREE.MTLLoader();
		mtlLoader.setPath(path);
		//funciones lambda es lo mismo que una función anonima
		
							//en materialCargado nos va a regresar el material ya cargado
		mtlLoader.load(mtlFile,(materialCargado)=>{
			//este bloque se eejcuta solo cuando termina de cargar el MTL
			var objLoader=new THREE.OBJLoader();
			objLoader.setPath(path);
			objLoader.setMaterials(materialCargado);
			//iniciar la carga del obj, con un callback, cuando este cargado
			objLoader.load(objFile,(objCargado)=>{
				//se ejecuta cuando se termina de cargar el OBJ
				onLoadCallback(objCargado);
			})
		})
	}